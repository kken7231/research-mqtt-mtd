name: Rust CI on v2

on:
  push:
    branches: [ "feat/16-ci-in-github-action" ]
  pull_request:
    branches: [ "feat/16-ci-in-github-action" ]

env:
  CARGO_TERM_COLOR: always
  RUST_WORKSPACE_DIR: './rust-mqttmtd'
  DOCKERFILE_DIR: './docker/Dockerfiles/'
  CARGO_TARGET: 'x86_64-unknown-linux-musl'

jobs:
  cargo-tests:
    name: Cargo Tests
    runs-on: ubuntu-latest # x86_64 guaranteed
    defaults:
      run:
        working-directory: ${{ env.RUST_WORKSPACE_DIR }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.RUST_WORKSPACE_DIR }}/.cargo/bin/
            ${{ env.RUST_WORKSPACE_DIR }}/.cargo/registry/index/
            ${{ env.RUST_WORKSPACE_DIR }}/.cargo/registry/cache/
            ${{ env.RUST_WORKSPACE_DIR }}/.cargo/git/db/
            ${{ env.RUST_WORKSPACE_DIR }}/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles(format('{0}/Cargo.lock', env.RUST_WORKSPACE_DIR)) }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Run tests for specific packages
        run: |
          cargo test --workspace --exclude tokenmgr --exclude to_string_lines_macro

  docker-tests:
    name: Docker Compose Tests
    runs-on: ubuntu-latest
    needs: cargo-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.RUST_WORKSPACE_DIR }}/.cargo/bin/
            ${{ env.RUST_WORKSPACE_DIR }}/.cargo/registry/index/
            ${{ env.RUST_WORKSPACE_DIR }}/.cargo/registry/cache/
            ${{ env.RUST_WORKSPACE_DIR }}/.cargo/git/db/
            ${{ env.RUST_WORKSPACE_DIR }}/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles(format('{0}/Cargo.lock', env.RUST_WORKSPACE_DIR)) }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Run certgen for certificate generation
        working-directory: ${{ env.RUST_WORKSPACE_DIR }}/testing/
        run: |
          cargo run -- certgen --conf ../../tests/certs/certgen.toml --output-dir ../../tests/certs
          ls -l ../../tests/certs

      - name: Prepare musl toolchain
        working-directory: ${{ env.RUST_WORKSPACE_DIR }}/tokenmgr/
        run: |
          sudo apt-get -y install musl-dev gcc
          rustup target add ${{ env.CARGO_TARGET }}
          mkdir -p ../../compiled

      - name: Compile server binary
        working-directory: ${{ env.RUST_WORKSPACE_DIR }}/
        run: |
          cargo build --package mqttmtd-authserver --package mqttinterface --target ${{ env.CARGO_TARGET }}

      - name: Compile test binary
        working-directory: ${{ env.RUST_WORKSPACE_DIR }}/tokenmgr/
        run: |
          cargo test --no-run --color always --target ${{ env.CARGO_TARGET }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and run server
        run: |
          docker network create inner-default
          docker build -f ${{ env.DOCKERFILE_DIR }}/Dockerfile.server_ghaction -t server-image .
          docker run --detach --rm --name server --network inner-default server-image

      - name: Wait for services to be healthy
        run: |
          echo "Waiting for server to start..."
          timeout 30s bash -c 'while [[ "$(docker inspect -f {{.State.Health.Status}} server)" != "healthy" ]]; do sleep 5; done'

      - name: Build and run tester (client)
        run: |
          docker build -f ${{ env.DOCKERFILE_DIR }}/Dockerfile.client_ghaction -t client-image .
          docker run --rm --name client1 --network inner-default client-image

      - name: Stop and remove Docker Compose services
        if: always()
        run: |
          docker stop server